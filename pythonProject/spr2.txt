import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image

# Sprawdzenie dostępności GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Wczytanie danych
df = pd.read_csv('cards.csv')

# Podział na zbiory na podstawie ścieżek
train_df = df[df['filepaths'].str.contains('train/')]
test_df = df[df['filepaths'].str.contains('test/')]
valid_df = df[df['filepaths'].str.contains('valid/')]

print(f"Train samples: {len(train_df)}")
print(f"Test samples: {len(test_df)}")
print(f"Validation samples: {len(valid_df)}")


# Funkcja do zapisywania obrazów
def save_images(images, labels, folder="saved_images", prefix=""):
    os.makedirs(folder, exist_ok=True)
    for i, (img, label) in enumerate(zip(images, labels)):
        # Konwersja tensora na obraz PIL
        img_pil = transforms.ToPILImage()(img.cpu())  # Przenosimy na CPU przed konwersją
        class_name = str(label.item())
        class_folder = os.path.join(folder, class_name)
        os.makedirs(class_folder, exist_ok=True)
        filename = f"{prefix}sample_{i}.png"
        img_pil.save(os.path.join(class_folder, filename))


def plot_class_distribution(df, title):
    class_dist = df['labels'].value_counts()
    plt.figure(figsize=(12, 6))
    class_dist.plot(kind='bar')
    plt.title(title)
    plt.xlabel('Class')
    plt.ylabel('Count')
    plt.xticks(rotation=90)
    plt.show()


plot_class_distribution(train_df, "Class Distribution - Training Set")
plot_class_distribution(test_df, "Class Distribution - Test Set")
plot_class_distribution(valid_df, "Class Distribution - Validation Set")


class CardDataset(Dataset):
    def __init__(self, dataframe, transform=None, save_samples=False):
        self.dataframe = dataframe
        self.transform = transform
        self.save_samples = save_samples
        if save_samples:
            self.samples_dir = "original_samples"
            os.makedirs(self.samples_dir, exist_ok=True)

    def __len__(self):
        return len(self.dataframe)

    def __getitem__(self, idx):
        img_path = self.dataframe.iloc[idx]['filepaths']
        label = self.dataframe.iloc[idx]['class']

        image = Image.open(img_path).convert('RGB')

        # Zapis oryginalnego obrazu przed transformacjami
        if self.save_samples and idx < 10:  # Zapisz tylko 10 pierwszych próbek
            sample_path = os.path.join(self.samples_dir, f"sample_{idx}_class_{label}.png")
            image.save(sample_path)

        if self.transform:
            image = self.transform(image)

        return image, label


# Transformacje
train_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

test_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Tworzenie datasetów z możliwością zapisywania próbek
train_dataset = CardDataset(train_df, transform=train_transforms, save_samples=True)
test_dataset = CardDataset(test_df, transform=test_transforms)
valid_dataset = CardDataset(valid_df, transform=test_transforms)

# DataLoadery
batch_size = 32

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
valid_loader = DataLoader(valid_dataset, batch_size=batch_size, shuffle=False)


# Przenoszenie danych na GPU
def to_device(data, device):
    if isinstance(data, (list, tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)


class DeviceDataLoader():
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        for batch in self.dl:
            yield to_device(batch, self.device)

    def __len__(self):
        return len(self.dl)


# Tworzenie DataLoaderów z obsługą GPU
train_loader = DeviceDataLoader(train_loader, device)
test_loader = DeviceDataLoader(test_loader, device)
valid_loader = DeviceDataLoader(valid_loader, device)


def imshow(img, title=None):
    img = img.cpu().numpy().transpose((1, 2, 0))  # Przenosimy na CPU przed wyświetleniem
    mean = [0.485, 0.456, 0.406]
    std = [0.229, 0.224, 0.225]
    img = std * img + mean
    img = np.clip(img, 0, 1)
    plt.imshow(img)
    if title:
        plt.title(title)
    plt.axis('off')


# Pobieramy i zapisujemy próbki
images, labels = next(iter(train_loader))
save_images(images, labels, folder="transformed_samples", prefix="train_")

# Wyświetlamy przykłady
plt.figure(figsize=(12, 8))
for i in range(4):
    plt.subplot(2, 2, i + 1)
    imshow(images[i], title=f"Class: {labels[i].item()}")
plt.show()